namespace Dcdr.Interconnect.DcdrFlatBuffers;

// Protocol-specific

// Chunk data

table Vec3
{
    x: float;
    y: float;
    z: float;
}

table Pixel
{
    color: Vec3;
    variance: Vec3;
    samples: ulong;
}

table ChunkInfo
{
    x: ushort;
    y: ushort;
    w: ushort;
    h: ushort;
}

table Chunk
{
    info: ChunkInfo;
    pixels: [Pixel];
}

// Chunk rendering task

table ChunkTask
{
    chunk: ChunkInfo;
    iterations: uint;
}

// ========== Worker Requests ==========

table WorkerConnectRequest
{
    token: [ubyte];
}

table WorkerDisconnectRequest {}

table WorkerGetSceneInfoRequest {}

table WorkerVerifySceneRequest
{
    sceneMD5: string;
}

table WorkerGetWorkScopeRequest 
{
    threadsAvailable: ushort;
}

table WorkerPublishArtifactsRequest
{
    chunks: [Chunk];
}

union WorkerRequestData
{
    WorkerConnectRequest,
    WorkerDisconnectRequest,
    WorkerGetSceneInfoRequest,
    WorkerVerifySceneRequest,
    WorkerGetWorkScopeRequest,
    WorkerPublishArtifactsRequest,
}

table WorkerRequest
{
    session: [ubyte];
    requestData: WorkerRequestData;
}

// ========== Worker responses ==========

table WorkerErrorResponse
{
    cause: string;
}

table WorkerConnectResponse
{
    connectionId: [ubyte];
}

table WorkerDisconnectResponse {}

table WorkerGetSceneInfoResponse
{
    sceneId: string;
}

table WorkerVerifySceneResponse {}

table WorkerGetWorkScopeResponse
{
    tasks: [ChunkTask];
}

table WorkerPublishArtifactsResponse {}

union WorkerResponseData
{
    WorkerErrorResponse,
    WorkerConnectResponse,
    WorkerDisconnectResponse,
    WorkerGetSceneInfoResponse,
    WorkerVerifySceneResponse,
    WorkerGetWorkScopeResponse,
    WorkerPublishArtifactsResponse,
}

table WorkerResponse
{
    session: [ubyte];
    responseData: WorkerResponseData;
}


// ========== Commander requests ==========

table CommanderGetSurfaceInfoRequest {}
table CommanderGetSurfaceRequest {}

union CommanderRequestData
{
    CommanderGetSurfaceInfoRequest,
    CommanderGetSurfaceRequest,
}

table CommanderRequest
{
    requestData: CommanderRequestData;
}


table CommanderGetSurfaceInfoResponse
{
    width: uint32;
    height: uint32;
}

// ========== Commander Responses ==========

enum SurfaceImageFormat : uint16
{
    Png,
    Unknown,
}

table CommanderGetSurfaceResponse
{
    format: SurfaceImageFormat;
    buffer: [ubyte];
}


union CommanderResponseData
{
    CommanderGetSurfaceInfoResponse,
    CommanderGetSurfaceResponse,
}

table CommanderResponse
{
    responseData : CommanderResponseData;
}

union ParcelData
{
    WorkerRequest,
    WorkerResponse,
    CommanderRequest,
    CommanderResponse,
}

table Parcel
{
    parcelData: ParcelData;
}